let DataflowJsGen = ometa {
  trans      = [:t apply(t):ans]         -> ans,

  number   :n                            -> ('(' + n + ')'),
  string   :s                            -> s.toProgramString(),
  regExpr  :x                            -> x,
  arr      trans*:xs                     -> ('[' + xs.join(',') + ']'),
  unop     :op trans:x                   -> ('(' + op + ' ' + x + ')'),
  getp     trans:fd trans:x              -> (x + '[' + fd + ']'),
  get      :x                            -> (this._isInput(x) ? 'nodes[' + x.toProgramString() + '].value' : x),
  binop    :op trans:x trans:y           -> ('(' + x + ' ' + op + ' ' + y + ')'),
  condExpr trans:cond trans:t trans:e    -> ('(' + cond + '?' + t + ':' + e + ')'),

  call     trans:fn trans*:args          -> (fn + '(' + args.join(',') + ')'),
  send     :msg trans:recv trans*:args   -> (recv + '.' + msg + '(' + args.join(',') + ')'),
  json     trans*:props                  -> ('({' + props.join(',') + '})'),
  binding  :name trans:val               -> (name.toProgramString() + ': ' + val),

  when     trans:c trans:e               -> ['if(', c, ')return ', e, ';'].join(''),
  else     trans:e                       -> ('return ' + e + ';'),
  switch   trans*:xs                     -> xs.join(''),

  nodeExpr = [:t (
      ?(t == 'switch') apply(t):a -> a |
      apply(t):a -> ('return ' + a + ';')
                 ):ans ]                 -> ans,

  node = :e ?(!e.builtin)
         nodeExpr(e.expr):c              -> ['{name:', e.name.toProgramString(),
                                             ',eval:function(nodes){', c, '}',
                                             ',inputs:', this._toItemString(e.inputs),'}'].join(''),

  builtinArgs = [ trans*:xs ]            -> xs.join(','),
  builtin = :e ?(e.builtin)
            builtinArgs(e.expr):args     -> ['{name:', e.name.toProgramString(),
                                             ',builtin:', e.builtin.toProgramString(),
                                             ',eval:function(nodes){return [', args, '];}',
                                             ',inputs:', this._toItemString(e.inputs),'}'].join(''),

  dataflow = [ (node | builtin)*:ns ]    -> ('[' + ns.join(',\n') + ']'),
  Dataflow = [ :nodes
               { this.setInput(nodes); }
               dataflow:p ]              -> p,
};
DataflowJsGen._toItemString = function(inputs) {
  let items = {};
  for (let i = 0; i < inputs.length; i++)
    if (this._isInput(inputs[i]))
      items[inputs[i]] = true;

  let s = '[';
  for (let i in items)
    s += i.toProgramString() + ',';
  s += ']';
  return s;
};
DataflowJsGen._isInput = function(name) {
  return this._inputs && this._inputs[name] === true;
};
DataflowJsGen.setInput = function(inputs) {
  this._inputs = {};
  for (let i = 0; i < inputs.length; i++)
    this._inputs[inputs[i]] = true;
};
