let flatten1 = function(array) {
  if (array.length < 1) return array;
  return array.reduce(function(a, b) { return a.concat(b); });
};

let _e = function(node) { return node.expr; };
let _n = function(node) { return node.nodes; };
let _i = function(node) { return node.inputs; };


let ExtractExpr = ometa {
  trans     = [:t apply(t):ans]          -> ans,

  number   :n                            -> [#number, n],
  string   :s                            -> [#string, s],
  regExpr  :x                            -> [#regExpr, x],
  arr      trans*:xs                     -> [#arr].concat(xs),
  unop     :op trans:x                   -> [#unop, op, x],
  getp     trans:fd trans:x              -> [#getp, fd, x],
  get      :x                            -> [#get, x],
  binop    :op trans:x trans:y           -> [#binop, op, x, y],
  condExpr trans:cond trans:t trans:e    -> [#condExpr, cond, t, e],

  call     trans:fn trans*:args          -> [#call, fn].concat(args),
  send     :msg trans:recv trans*:args   -> [#send, msg, recv].concat(args),
  json     trans*:props                  -> [#json].concat(props),
  binding  :name trans:val               -> [#binding, name, val],

  when     trans:c trans:e               -> [#when, c, e],
  else     trans:e                       -> [#else, e],
  switch   trans*:xs                     -> [#switch].concat(xs),

  builtin  :name :id trans*:args         -> [#get, '@' + id],

  propagate :name trans:x :l             -> [#propagate, name, x, l],

  program trans*:xs                      -> [#program].concat(xs),
};

let ExtractInputs = ometa {
  trans     = [:t apply(t):ans]          -> ans,

  number   :n                            -> [],
  string   :s                            -> [],
  regExpr  :x                            -> [],
  arr      trans*:xs                     -> flatten1(xs),
  unop     :op trans:x                   -> x,
  getp     trans:fd trans:x              -> fd.concat(x),
  get      :x                            -> [x],
  binop    :op trans:x trans:y           -> x.concat(y),
  condExpr trans:cond trans:t trans:e    -> cond.concat(t).concat(e),

  call     trans:fn trans*:args          -> fn.concat(flatten1(args)),
  send     :msg trans:recv trans*:args   -> recv.concat(flatten1(args)),
  json     trans*:props                  -> flatten1(props),
  binding  :name trans:val               -> val,

  when     trans:c trans:e               -> c.concat(e),
  else     trans:e                       -> e,
  switch   trans*:xs                     -> flatten1(xs),

  builtin  :name :id trans*:args         -> ['@' + id],

  propagate :name trans:x :l             -> x,

  program trans*:xs                      -> flatten1(xs),
};

let ExtractNodes = ometa {
  trans     = [:t apply(t):ans]          -> ans,

  number   :n                            -> [],
  string   :s                            -> [],
  regExpr  :x                            -> [],
  arr      trans*:xs                     -> flatten1(xs),
  unop     :op trans:x                   -> x,
  getp     trans:fd trans:x              -> fd.concat(x),
  get      :x                            -> [],
  binop    :op trans:x trans:y           -> x.concat(y),
  condExpr trans:cond trans:t trans:e    -> cond.concat(t).concat(e),

  call     trans:fn trans*:args          -> fn.concat(flatten1(args)),
  send     :msg trans:recv trans*:args   -> recv.concat(flatten1(args)),
  json     trans*:props                  -> flatten1(props),
  binding  :name trans:val               -> val,

  when     trans:c trans:e               -> c.concat(e),
  else     trans:e                       -> e,
  switch   trans*:xs                     -> flatten1(xs),

  builtin  :name :id
           (anything:a
            ExtractExpr.trans(a):e
            trans(a):n
            ExtractInputs.trans(a):i     -> { expr: e, nodes: n, inputs: i })*:args
                                         -> [{ name: '@' + id, expr: args.map(_e), inputs: flatten1(args.map(_i)), builtin: name }].concat(flatten1(args.map(_n))),

  propagate :name :a
      ExtractInputs.trans(a):i
      ExtractExpr.trans(a):e
      trans(a):nodes :l                  -> [{ name: name, expr: e, inputs: i }].concat(nodes),

  program trans*:xs                      -> flatten1(xs),
};
