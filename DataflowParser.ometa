let DataflowParser = ometa(BaseStrParser) {
//  space        = ^space | fromToOrEnd('//', '\n'),

  // Numbers:
  number       = spaces <digit+ ('.' digit+)?>:f                          -> parseFloat(f),

  // Identifiers:
  nameFirst    = letter | '$' | '_',
  nameRest     = nameFirst | digit,
  name         = spaces <nameFirst nameRest*>,

  // Builtins:
  builtin      = "@" name,

  // Expressions:
  expr         = expr:x "||" andExpr:y                                    -> [#binop, "||", x, y]
               | andExpr,
  andExpr      = andExpr:x "&&" eqExpr:y                                  -> [#binop, "&&", x, y]
               | eqExpr,
  eqExpr       = eqExpr:x ( "=="  relExpr:y                               -> [#binop, "==",  x, y]
                          | "!="  relExpr:y                               -> [#binop, "!=",  x, y]
                          | "===" relExpr:y                               -> [#binop, "===", x, y]
                          | "!==" relExpr:y                               -> [#binop, "!==", x, y]
                          )
               | relExpr,
  relExpr      = relExpr:x ( ">"          addExpr:y                       -> [#binop, ">",   x, y]
                           | ">="         addExpr:y                       -> [#binop, ">=",  x, y]
                           | "<"          addExpr:y                       -> [#binop, "<",   x, y]
                           | "<="         addExpr:y                       -> [#binop, "<=",  x, y]
                           )
               | addExpr,
  addExpr     = addExpr:x "+" mulExpr:y                                   -> [#binop, "+",   x, y]
               | addExpr:x "-" mulExpr:y                                  -> [#binop, "-",   x, y]
               | mulExpr,
  mulExpr      = mulExpr:x "*" unary:y                                    -> [#binop, "*",   x, y]
               | mulExpr:x "/" unary:y                                    -> [#binop, "/",   x, y]
               | mulExpr:x "%" unary:y                                    -> [#binop, "%",   x, y]
               | unary,
  unary        = "-"      primExpr:p                                      -> [#unop,  "-",   p]
               | "+"      primExpr:p                                      -> [#unop,  "+",   p]
               | primExpr,
  primExpr     = primExpr:p ( "[" expr:i "]"                              -> [#getp, i, p]
                            | "." "name":m "(" listOf(#expr, ','):as ")"  -> [#send, m, p].concat(as)
                            | "." "name":f                                -> [#getp, [#string, f], p]
                            | "(" listOf(#expr, ','):as ")"               -> [#call, p].concat(as)
                            )
               | builtin:b "(" listOf(#expr, ','):as ")"                  -> [#builtin, b].concat(as)
               | primExprHd,
  primExprHd   = "(" expr:e ")"                                           -> e
               | name:n                                                   -> [#get, n]
               | number:n                                                 -> [#number, n]
               | "[" enum(#expr, ','):es "]"                              -> [#arr].concat(es),

  // Propagations:
  propagate    = name:n "<-" expr:e                                       -> [#propagate, n, e, @location],

  top          = spaces (propagate:p spaces -> p)*:pp end                 -> [#program].concat(pp),
};
